name: DevSecOps CI

on:
  pull_request:
  push:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  id-token: write
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/juice-shop
  TAG: ${{ github.sha }}

jobs:
  static:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Gitleaks (unchanged except using results.sarif)
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --redact -v --report-format sarif --report-path results.sarif

      - name: Upload Gitleaks SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif

      # Semgrep SAST (deterministic via Docker) → SARIF
      - name: Semgrep (docker)
        run: |
          docker run --rm \
            -v "$PWD:/src" \
            --workdir /src \
            returntocorp/semgrep:1.76.0 \
            semgrep ci \
              --config p/owasp-top-ten \
              --config p/nodejsscan \
              --config p/docker \
              --sarif -o semgrep.sarif
      # Guard: don’t let the upload fail if Semgrep didn’t produce a file
      - name: Ensure Semgrep SARIF exists
        if: always()
        run: |
          test -f semgrep.sarif || echo '{"version":"2.1.0","runs":[]}' > semgrep.sarif
          ls -l semgrep.sarif
      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error        # only “error” level fails the job
          format: sarif
          output-file: hadolint.sarif

      - name: Upload Hadolint SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint.sarif

      - name: Checkov (IaC)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform,kubernetes

build_and_scan:
  runs-on: ubuntu-latest
  needs: static
  steps:
    - uses: actions/checkout@v4

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build+push only on main so we get a digest (buildx only exposes digest when pushing)
    - name: Build & push image (main only)
      id: build
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:${{ env.TAG }}
          ${{ env.IMAGE_NAME }}:latest

    # For PRs (non-main), just build locally (no digest available)
    - name: Build image (PRs)
      if: github.ref != 'refs/heads/main'
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: ${{ env.IMAGE_NAME }}:${{ env.TAG }}

    - name: Save image to tar (for scans)
      run: docker save $IMAGE_NAME:$TAG -o image.tar

    - name: SBOM (Syft)
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.IMAGE_NAME }}:${{ env.TAG }}
        format: cyclonedx-json
        output-file: sbom.cdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.cdx.json

    - name: Trivy FS (source deps/secrets)
      uses: aquasecurity/trivy-action@0.24.0
      with:
        scan-type: fs
        scan-ref: .
        format: sarif
        output: trivy-fs.sarif
        severity: CRITICAL,HIGH

    - name: Trivy Image
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ env.TAG }}
        format: sarif
        output: trivy-image.sarif
        severity: CRITICAL,HIGH

    - name: Upload Trivy FS SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-fs.sarif

    - name: Upload Trivy Image SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-image.sarif

    # === render K8s manifest with the digest (main only) ===
    - name: Render K8s manifest with digest (main only)
      if: github.ref == 'refs/heads/main'
      run: |
        IMAGE_REF="${IMAGE_NAME}@${{ steps.build.outputs.digest }}"
        echo "Resolved image: $IMAGE_REF"
        sed "s|IMAGE_WITH_DIGEST|$IMAGE_REF|g" deployment/k8s/juice-shop.yaml > deployment/k8s/juice-shop.rendered.yaml
        echo "Rendered deployment/k8s/juice-shop.rendered.yaml:"
        grep 'image:' -n deployment/k8s/juice-shop.rendered.yaml

    - name: Upload rendered manifest (main only)
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: k8s-rendered
        path: deployment/k8s/juice-shop.rendered.yaml

    - name: Cosign sign (keyless)
      if: github.ref == 'refs/heads/main'
      uses: sigstore/cosign-installer@v3

    - name: Sign image
      if: github.ref == 'refs/heads/main'
      run: cosign sign --yes $IMAGE_NAME:latest

  dast:
    runs-on: ubuntu-latest
    needs: build_and_scan
    services:
      juice:
        image: ghcr.io/juice-shop/juice-shop
        ports:
          - 3000:3000
        options: >-
          --health-cmd "wget -qO- http://localhost:3000 || exit 1"
          --health-interval 5s --health-timeout 2s --health-retries 30
    steps:
      - uses: actions/checkout@v4
      - name: Wait for app
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:3000 >/dev/null; then exit 0; fi
            sleep 2
          done
          echo "App did not become ready" && exit 1
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: "http://localhost:3000"
          rules_file_name: .zap/rules.tsv
          cmd_options: "-a"
          fail_action: true
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html
